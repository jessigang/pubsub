name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Azure 설정
  RESOURCE_GROUP: tiu-dgga-rg
  LOCATION: koreacentral
  TEAM_ID: unicorn

  # Container Registry 설정
  REGISTRY: unicorncr.azurecr.io
  IMAGE_ORG: telecom

  # 리소스 설정
  NAMESPACE: unicorn-pubsub-ns
  RESOURCES_REQUESTS_CPU: 250m
  RESOURCES_REQUESTS_MEMORY: 512Mi
  RESOURCES_LIMITS_CPU: 500m
  RESOURCES_LIMITS_MEMORY: 1024Mi

jobs:
  build:
    name: Build Services
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build Alert Service
        run: |
          chmod +x gradlew
          ./gradlew alert:clean alert:build -x test

      - name: Build Usage Service
        run: |
          ./gradlew usage:clean usage:build -x test

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            alert/build/libs/*.jar
            usage/build/libs/*.jar

  release:
    name: Build and Push Images
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Get current timestamp
        id: timestamp
        run: echo "::set-output name=value::$(date +'%Y%m%d%H%M%S')"

      - name: Build and push Alert image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile-alert
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/alert:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/alert:${{ steps.timestamp.outputs.value }}

      - name: Build and push Usage image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/Dockerfile-usage
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage:${{ steps.timestamp.outputs.value }}

  deploy:
    name: Deploy to AKS
    needs: release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.TEAM_ID }}-aks

      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate deployment manifest
        run: |
          export usage_image_path="${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/usage:${{ steps.timestamp.outputs.value }}"
          export alert_image_path="${{ env.REGISTRY }}/${{ env.IMAGE_ORG }}/alert:${{ steps.timestamp.outputs.value }}"
          
          # Generate deployment file from template
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment/deploy.yaml
          
          # Wait for pods to be ready
          echo "Waiting for Usage service pods..."
          kubectl wait --for=condition=ready pod -l "app=usage" -n ${{ env.NAMESPACE }} --timeout=300s
          
          echo "Waiting for Alert service pods..."
          kubectl wait --for=condition=ready pod -l "app=alert" -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Verify Deployment
        run: |
          echo "Verifying service endpoints..."
          
          # Get service IPs
          USAGE_IP=$(kubectl get svc usage-svc -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          ALERT_IP=$(kubectl get svc alert-svc -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          echo "Usage Service IP: $USAGE_IP"
          echo "Alert Service IP: $ALERT_IP"
          
          if [ -z "$USAGE_IP" ] || [ -z "$ALERT_IP" ]; then
            echo "Error: Service IPs not available"
            exit 1
          fi