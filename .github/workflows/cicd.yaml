name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: unicorncr.azurecr.io
  RESOURCE_GROUP: tiu-dgga-rg
  CLUSTER_NAME: unicorn-aks
  NAMESPACE: unicorn-pubsub-ns

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Usage Service
        run: ./gradlew usage:clean usage:build -x test

      - name: Build Alert Service
        run: ./gradlew alert:clean alert:build -x test

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: service-artifacts
          path: |
            usage/build/libs/*.jar
            alert/build/libs/*.jar

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      imageTag: ${{ steps.timestamp.outputs.value }}
    steps:
      - uses: actions/checkout@v3

      - name: Generate timestamp for tag
        id: timestamp
        run: echo "value=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: service-artifacts

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login
        run: az acr login --name unicorncr

      - name: Build and push Usage image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/Dockerfile-usage
          push: true
          tags: |
            ${{ env.REGISTRY }}/telecom/usage:${{ steps.timestamp.outputs.value }}
            ${{ env.REGISTRY }}/telecom/usage:latest

      - name: Build and push Alert image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/Dockerfile-alert
          push: true
          tags: |
            ${{ env.REGISTRY }}/telecom/alert:${{ steps.timestamp.outputs.value }}
            ${{ env.REGISTRY }}/telecom/alert:latest

  deploy:
    needs: release
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.release.outputs.imageTag }}
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate manifest from template
        run: |
          # Export variables for envsubst
          export namespace=${{ env.NAMESPACE }}
          export usage_image_path=${{ env.REGISTRY }}/telecom/usage:${{ env.IMAGE_TAG }}
          export alert_image_path=${{ env.REGISTRY }}/telecom/alert:${{ env.IMAGE_TAG }}
          export resources_requests_cpu=250m
          export resources_requests_memory=512Mi
          export resources_limits_cpu=500m
          export resources_limits_memory=1024Mi
          
          # Generate deployment file
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          
          # Debug: Print generated manifest
          echo "Generated manifest:"
          cat deployment/deploy.yaml

      - name: Deploy to AKS
        run: |
          kubectl apply -f deployment/deploy.yaml

      - name: Wait for deployments
        run: |
          kubectl wait --for=condition=ready pod -l "app=usage" -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl wait --for=condition=ready pod -l "app=alert" -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Verify Services
        run: |
          echo "Verifying service endpoints..."
          USAGE_IP=$(kubectl get svc usage-svc -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          ALERT_IP=$(kubectl get svc alert-svc -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          echo "Usage Service IP: $USAGE_IP"
          echo "Alert Service IP: $ALERT_IP"
          
          if [ -z "$USAGE_IP" ] || [ -z "$ALERT_IP" ]; then
            echo "Error: Service IPs not available"
            exit 1
          fi